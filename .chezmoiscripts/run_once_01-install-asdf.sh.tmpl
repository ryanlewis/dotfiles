#!/usr/bin/env bash
# Install asdf version manager - runs once
set -e

ASDF_VERSION="0.18.0"

# Skip if asdf is already installed and working
if command -v asdf &> /dev/null; then
    CURRENT_VERSION=$(asdf --version 2>/dev/null | cut -d' ' -f2 | sed 's/^v//')
    if [[ "$CURRENT_VERSION" == "$ASDF_VERSION" ]]; then
        echo "‚úì asdf v$ASDF_VERSION already installed"
        exit 0
    fi
    echo "üîÑ Upgrading asdf from v$CURRENT_VERSION to v$ASDF_VERSION..."
fi

echo "üîß Installing asdf v$ASDF_VERSION..."

# Install dependencies for building languages
{{ if eq .chezmoi.os "darwin" -}}
# macOS - use Homebrew
if command -v brew &> /dev/null; then
    echo "üì¶ Installing asdf via Homebrew..."
    brew install asdf
else
    echo "‚ùå Homebrew not found. Please install Homebrew first."
    exit 1
fi
{{ else if eq .chezmoi.os "linux" -}}
# Linux - download binary
echo "üì• Downloading asdf binary..."

# Ensure ~/.local/bin exists
mkdir -p "$HOME/.local/bin"

# Helper function to get architecture
get_arch() {
    local arch=$(uname -m)
    case "$arch" in
        x86_64) echo "linux-amd64" ;;
        aarch64|arm64) echo "linux-arm64" ;;
        armv7l) echo "linux-arm" ;;
        *) echo "unsupported" ;;
    esac
}

ARCH=$(get_arch)
if [[ "$ARCH" == "unsupported" ]]; then
    echo "‚ùå Unsupported architecture: $(uname -m)"
    exit 1
fi

# Download and extract binary
DOWNLOAD_URL="https://github.com/asdf-vm/asdf/releases/download/v${ASDF_VERSION}/asdf-v${ASDF_VERSION}-${ARCH}.tar.gz"
echo "üì• Downloading from: $DOWNLOAD_URL"
wget -qO /tmp/asdf.tar.gz "$DOWNLOAD_URL"
tar -xzf /tmp/asdf.tar.gz -C /tmp asdf
mv /tmp/asdf "$HOME/.local/bin/asdf"
chmod +x "$HOME/.local/bin/asdf"
rm -rf /tmp/asdf.tar.gz

# Install build dependencies for languages
if command -v apt &> /dev/null; then
    echo "üì¶ Installing build dependencies..."
    sudo apt-get update -qq
    sudo apt-get install -y -qq \
        curl git build-essential libssl-dev zlib1g-dev \
        libbz2-dev libreadline-dev libsqlite3-dev wget unzip llvm libncurses5-dev \
        libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python3-openssl
elif command -v dnf &> /dev/null; then
    sudo dnf groupinstall -y "Development Tools"
    sudo dnf install -y curl git openssl-devel zlib-devel bzip2-devel \
        readline-devel sqlite-devel wget unzip llvm ncurses-devel
elif command -v pacman &> /dev/null; then
    sudo pacman -S --noconfirm base-devel curl git
fi
{{ end -}}

# Ensure ASDF_DATA_DIR directory exists (for backward compatibility)
export ASDF_DATA_DIR="${ASDF_DATA_DIR:-$HOME/.asdf}"
mkdir -p "$ASDF_DATA_DIR"
mkdir -p "$ASDF_DATA_DIR/shims"

# Reshim if this is an upgrade
if [[ -d "$ASDF_DATA_DIR/installs" ]]; then
    echo "üîÑ Regenerating shims..."
    export PATH="$HOME/.local/bin:$PATH"
    asdf reshim || true
fi

echo "‚úì asdf v$ASDF_VERSION installed successfully"
echo ""
echo "üìù Note: asdf v0.16+ requires manual updates via package manager or downloading new binaries"
echo "   No more 'asdf update' command available"