#!/bin/bash
# Install asdf version manager - runs once
set -e

ASDF_VERSION="0.18.0"

# Ensure ~/.local/bin exists and is in PATH
mkdir -p "$HOME/.local/bin"
export PATH="$HOME/.local/bin:$PATH"

# Skip if asdf is already installed and working
{{ if eq .chezmoi.os "darwin" -}}
# Check for Homebrew installation
if command -v asdf &> /dev/null; then
    CURRENT_VERSION=$(asdf --version 2>/dev/null | cut -d' ' -f2 | sed 's/^v//')
    echo "✓ asdf v$CURRENT_VERSION already installed via Homebrew"
    exit 0
fi
{{ else -}}
# Check for asdf binary in ~/.local/bin
if [[ -x "$HOME/.local/bin/asdf" ]]; then
    CURRENT_VERSION=$("$HOME/.local/bin/asdf" version 2>/dev/null | grep -oP 'v\K[0-9.]+' || echo "")
    if [[ "$CURRENT_VERSION" == "$ASDF_VERSION" ]]; then
        echo "✓ asdf v$ASDF_VERSION already installed"
        exit 0
    elif [[ -n "$CURRENT_VERSION" ]]; then
        echo "🔄 Upgrading asdf from v$CURRENT_VERSION to v$ASDF_VERSION..."
    fi
fi

# Clean up old git-based installation if it exists (but preserve installs)
if [[ -d "$HOME/.asdf" ]] && [[ ! -d "$HOME/.asdf/installs" ]]; then
    echo "🧹 Removing old git-based asdf installation (no language installs found)..."
    rm -rf "$HOME/.asdf"
elif [[ -f "$HOME/.asdf/asdf.sh" ]]; then
    echo "🧹 Cleaning up old git-based asdf files (preserving language installs)..."
    # Remove everything except installs, plugins, downloads, and shims
    find "$HOME/.asdf" -maxdepth 1 -type f -delete 2>/dev/null || true
    find "$HOME/.asdf" -maxdepth 1 -type d ! -name installs ! -name plugins ! -name downloads ! -name shims ! -name .asdf -exec rm -rf {} + 2>/dev/null || true
fi
{{ end -}}

echo "🔧 Installing asdf v$ASDF_VERSION..."

# Helper function to get architecture
get_arch() {
    local arch=$(uname -m)
    case "$arch" in
        x86_64) echo "x86_64" ;;
        aarch64|arm64) echo "aarch64" ;;
        *) echo "$arch" ;;
    esac
}

ARCH=$(get_arch)

{{ if eq .chezmoi.os "darwin" -}}
# macOS - use Homebrew
if command -v brew &> /dev/null; then
    echo "📦 Installing asdf via Homebrew..."
    brew install asdf
else
    echo "❌ Homebrew not found. Please install Homebrew first."
    exit 1
fi
{{ else if eq .chezmoi.os "linux" -}}
# Linux - install pre-compiled binary
echo "📥 Downloading asdf binary for Linux $ARCH..."

# Determine the correct binary URL based on architecture
if [[ "$ARCH" == "x86_64" ]]; then
    ASDF_ARCHIVE="asdf-v${ASDF_VERSION}-linux-amd64.tar.gz"
elif [[ "$ARCH" == "aarch64" ]]; then
    ASDF_ARCHIVE="asdf-v${ASDF_VERSION}-linux-arm64.tar.gz"
else
    echo "❌ Unsupported architecture: $ARCH"
    exit 1
fi

ASDF_DOWNLOAD_URL="https://github.com/asdf-vm/asdf/releases/download/v${ASDF_VERSION}/${ASDF_ARCHIVE}"

# Download and extract the binary
echo "📦 Downloading from: $ASDF_DOWNLOAD_URL"
wget -qO "/tmp/${ASDF_ARCHIVE}" "$ASDF_DOWNLOAD_URL"
tar -xzf "/tmp/${ASDF_ARCHIVE}" -C "$HOME/.local/bin" asdf
chmod +x "$HOME/.local/bin/asdf"
rm -f "/tmp/${ASDF_ARCHIVE}"

# Ensure ASDF_DATA_DIR directory exists
mkdir -p "$HOME/.asdf"

# Install build dependencies for languages (still needed for compiling language versions)
if command -v apt &> /dev/null; then
    echo "📦 Installing build dependencies for language compilation..."
    sudo apt-get update -qq
    sudo apt-get install -y -qq \
        curl git build-essential libssl-dev zlib1g-dev \
        libbz2-dev libreadline-dev libsqlite3-dev wget unzip llvm libncurses5-dev \
        libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python3-openssl
elif command -v dnf &> /dev/null; then
    sudo dnf groupinstall -y "Development Tools"
    sudo dnf install -y curl git openssl-devel zlib-devel bzip2-devel \
        readline-devel sqlite-devel wget unzip llvm ncurses-devel
elif command -v pacman &> /dev/null; then
    sudo pacman -S --noconfirm base-devel curl git
fi
{{ end -}}

# Set ASDF_DATA_DIR for compatibility
export ASDF_DATA_DIR="${ASDF_DATA_DIR:-$HOME/.asdf}"

# Verify installation
if command -v asdf &> /dev/null; then
    INSTALLED_VERSION=$(asdf version 2>/dev/null | grep -oP 'v\K[0-9.]+' || echo "unknown")
    echo "✓ asdf v$INSTALLED_VERSION installed successfully"
    
    # Ensure necessary directories exist
    mkdir -p "$ASDF_DATA_DIR/shims"
    mkdir -p "$ASDF_DATA_DIR/installs"
    
    # Reshim if there are existing language installations
    if [[ -d "$ASDF_DATA_DIR/installs" ]] && [[ "$(ls -A "$ASDF_DATA_DIR/installs" 2>/dev/null)" ]]; then
        echo "🔄 Regenerating shims for existing language installations..."
        asdf reshim || true
    fi
else
    echo "❌ Failed to install asdf"
    exit 1
fi

echo ""
echo "📝 Note: asdf is now installed as a pre-compiled binary in ~/.local/bin"
echo "   Language installations and plugins are still stored in ~/.asdf"